#!/usr/bin/python3

"""
Compare the packages in our Copr to those in CentOS Stream 9.
"""

import re
import posixpath
from copr.v3 import Client
import productmd.compose
import koji
import rpm
from colorama import init, Fore


COMPOSE_URL = 'https://composes.stream.centos.org/production/latest-CentOS-Stream'
KOJI_PROFILE = 'stream'
KOJI_TAG = 'c9s-pending'

init(autoreset=True)


class Package(object):
    """ Class for comparing RPM versions """
    def __init__(self, name, version, release, epoch=None):
        self.name = name
        self.version = version
        self.release = release
        self.epoch = epoch

    def __cmp__(self, other):
        if self.name != other.name:
            return (self.name > other.name) - (self.name < other.name)
        return rpm.labelCompare((self.epoch, self.version, self.release),
                                (other.epoch, other.version, other.release))

    def __str__(self):
        return f'{self.name}-{self.version}-{self.release}'

    def __repr__(self):
        return f'Package("{self.name}", "{self.version}", "{self.release}")'

    def __eq__(self, other):
        return self.__cmp__(other) == 0

    def __gt__(self, other):
        return self.__cmp__(other) == 1

    def __ge__(self, other):
        return self.__gt__(other) or self.__eq__(other)

    def __lt__(self, other):
        return self.__cmp__(other) == -1

    def __le__(self, other):
        return self.__lt__(other) or self.__eq__(other)


def get_session(profile=KOJI_PROFILE):
    """
    Return an anonymous koji session for this profile name.

    :param str profile: profile name, eg. "stream"
    :returns: anonymous koji.ClientSession
    """
    # Note, get_profile_module() raises koji.ConfigurationError if we
    # could not find this profile's name in /etc/koji.conf.d/*.conf and
    # ~/.koji/config.d/*.conf.
    mykoji = koji.get_profile_module(profile)
    opts = vars(mykoji.config)
    opts['noauth'] = True
    session = mykoji.ClientSession(mykoji.config.server, opts)
    return session


def get_koji_pathinfo(profile):
    """
    Return a Koji PathInfo object for our profile.

    :param str profile: profile name, like "koji" or "cbs"
    :returns: koji.PathInfo
    """
    conf = koji.read_config(profile)
    top = conf['topurl']  # or 'topdir' here for NFS access
    pathinfo = koji.PathInfo(topdir=top)
    return pathinfo


def koji_srpm_url(session, package):
    """Get the SRPM download URL for a package.
    """
    pathinfo = get_koji_pathinfo(KOJI_PROFILE)
    buildinfo = session.getBuild(str(package))
    rpminfo = {
        'arch': 'src',
        'name': package.name,
        'version': package.version,
        'release': package.release,
    }
    # "build" should be a dict here...
    builddir = pathinfo.build(buildinfo)
    rpmpath = pathinfo.rpm(rpminfo)
    url = posixpath.join(builddir, rpmpath)
    return url


def get_compose_packages(compose_url):
    """
    Return a dict of names->Packages

    Use this method to determine what versions exist in a compose.
    """
    compose = productmd.compose.Compose(compose_url)

    pkgs = {}

    for variant in compose.rpms.rpms:
        for arch in compose.rpms.rpms[variant]:
            for srpm in compose.rpms.rpms[variant][arch]:
                # example srpm string: "ceph-2:12.2.5-25.el7cp.src"
                data = productmd.common.parse_nvra(srpm)
                name = data['name']
                pkg = Package(name, data['version'], data['release'])
                pkgs[name] = pkg
    return pkgs


def get_copr_packages(client):
    """
    Return a dict of Copr source package names->Packages

    Use this method to determine what versions exist in Copr.

    See https://python-copr.readthedocs.io/en/latest/ClientV3.html
    for API documentation
    """
    # XXX: this does not hand pagination at all.
    packages_data = client.package_proxy.get_list('ceph', 'el9',
                                                  with_latest_succeeded_build=True)
    packages = {}
    for package_data in packages_data:
        if not package_data.builds['latest_succeeded']:
            print(f'{package_data.name} lacks a successful build. delete it.')
            continue
        src_pkg = package_data.builds['latest_succeeded']['source_package']
        name = src_pkg['name']
        version, release = src_pkg['version'].rsplit('-')
        if ':' in version:
            _, version = version.split(':', 1)
        # hack: edit these release values slightly.
        release = re.sub(r'\.el8$', '.el9', release)
        release = re.sub(r'\.fc\d+$', '.el9', release)
        package = Package(name, version, release)
        packages[name] = package
    return packages


def main():
    session = get_session()
    client = Client.create_from_config_file()

    copr_packages = get_copr_packages(client)
    print('Found %d Copr packages' % len(copr_packages))

    print(f'Loading compose at {COMPOSE_URL}...')
    compose_packages = get_compose_packages(COMPOSE_URL)

    for name in sorted(copr_packages):
        copr_pkg = copr_packages[name]
        compose_pkg = compose_packages.get(name)
        if compose_pkg:
            if compose_pkg > copr_pkg:
                print(Fore.YELLOW + f'Compose has {compose_pkg}, newer than Copr {copr_pkg}')
                koji_url = koji_srpm_url(session, compose_pkg)
                print(Fore.YELLOW + f"copr-cli build ceph/el9 {koji_url}")
                # (Note, this would not consider builds that are in progress, like
                # if we re-ran this script quickly.)
            if compose_pkg < copr_pkg:
                print(Fore.YELLOW + f'Compose has {compose_pkg}, older than Copr {copr_pkg}')
                print(Fore.RED + f"delete {copr_pkg} from Copr and rebuild Koji's version")
            if compose_pkg == copr_pkg:
                print(Fore.GREEN + f'Compose {compose_pkg} is the same as Copr {copr_pkg}')


if __name__ == '__main__':
    main()
